//Ethan Van Deusen
//Uses a PWM signal to flash LED D2

/*Configuration:
      Using External 32.768kHz watch crystal
      Clock source: ACLK
      Timer: Timer0_A3
*/

#include <msp430.h>

#define externClkFreq (32768)
#define prescl        (8)

#define D2      (0x08)  //00001000, all off except for the D segment for D2 LED
#define A3_CTRL (0x04)  //00000100, all inputs

// Represents user inputs for frequency and duty cycle, will be replaced later with actual inputs
float inputFreq = 1;
float inputDC = 50;

// Function to convert an inputed frequency into period
unsigned int periodCalc(float freq, unsigned int clkFreq, unsigned int prescaler)
{
    float periodInSec = 1.0 / freq;  // Calculate the period in seconds
    unsigned int periodInCycles = (unsigned int)(periodInSec * clkFreq / prescaler);  // Convert to clock cycles
    return periodInCycles;
}

// Function to convert an inputed duty cycle percentage into the value for timer register
unsigned int dcCalc(float dc, unsigned int period)
{
    //Duty cycle percentage = period/TA0CCR1
    float dcPercent;
    dcPercent = period * (1-(dc/100));
    return dcPercent;
}

void setupTimerA0(void)
{
   TA0CCTL1 = OUTMOD_3;                //Set timer's output mode to set/reset
   TA0CTL = TASSEL_1 + MC_1 + TACLR + ID_3;   //Select ACLK, Up mode, Clear timer count, Prescaler of 8
   BCSCTL3 = XCAP_3;                   //Set capacitor to 12.5pF for crystal
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;

    setupTimerA0();
    unsigned int period = periodCalc(inputFreq, externClkFreq, prescl);
    unsigned int dutyCycle = dcCalc(inputDC, period);

//P3 Configuration
    P3DIR = 0xFF;  //Set all 8 low side port pins to outputs The other segments will be off.
    P3OUT = D2;    //Allows LED D2 to turn on

//P1 Configuration
    P1DIR |= A3_CTRL;     //Init all of the Ax_CTRL pins to inputs except A3_CTRL for D2 LED
    P1OUT = 0;            //Init them all off before the main loop, keeps segments from fading in and out.
    P1SEL |= BIT2;        //Select P1.2 as timer output instead of GPIO

//Set up Timer0_A3
//Timer counts up from 0 to TA0CCR0. Once it hits TA0CCR1 the light is turned on. When it reaches TA0CCR0 light turns off and timer resets.
    TA0CCR0 = (period);                //Set PWM period
    TA0CCR1 = (dutyCycle);             //Set duty cycle.   Duty Cycle = 50%
   // __bis_SR_register(LPM3_bits);      //Enter LPM3
    return 0;
}










