//Ethan Van Deusen
//Attempting to display E on digit 1 and F on digit 2 at the same time.

#include <msp430.h>

#define ESeg (0x79)         //01111001 On: A, F, G, E, D    Off: B, C, DP
#define FSeg (0x71)         //01110001 On: A, F, G, E       Off: B, C, D, DP
#define OneSeg (0x06)       //00000110 On: B, C             Off: A, F, G, E, D, DP
#define ZeroSeg (0x3F)      //10111111 On: A, B, C, D, E, F, DP             Off: G

// Define the digit select codes for the first and second digits
#define A1_CTRL         BIT0    //Digit 1
#define A2_CTRL         BIT1    //Digit 2
#define A3_CTRL         BIT2    //Colon, LED's, deg sign
#define A4_CTRL         BIT3    //Digit 3
#define A5_CTRL         BIT4    //Digit 4

#define A_CTRL          BIT0
#define B_CTRL          BIT1
#define C_CTRL          BIT2
#define D_CTRL          BIT3
#define E_CTRL          BIT4
#define F_CTRL          BIT5
#define G_CTRL          BIT6
#define DP_CTRL         BIT7

typedef enum
{
    dispInit,    /* initialized state */
    dispDigit1,      /* anode 1, this is the 7-segment MSB, digit 1 */
    dispDigit2,      /* anode 2, this is the 7-segment digit 2 */
    dispDigit3,      /* anode 3, this is the 7-segment colon, degree symbol, and discrete LED's */
    dispDigit4,      /* anode 4, this is the 7-segment digit 3 */
    dispDigit5       /* anode 5, this is the 7-segment LSB, digit 4 */
} DisplayState;

volatile static DisplayState dispState = dispInit;
volatile unsigned int uiTimerTick = 0;

// Currently working, displays 'E' on digit 1 and 'F' on digit 2 at the same time. Uses a timer interrupt to show both at once.

/* Need to
 * 3. Clean up code
 * 4. Clean up macros
 * 5. Write explanation of how it all works
 * 6. Combine into main project
 * 7. Write code to link display to preset
 */

// Setup function for Timer1_A2
void SetupTimerA1(void)
{
  TA1CTL = TACLR;                   // stop the timer and clear it first
  TA1CCR0 = 500;                    // 500 = 75us / (1/8MHz) (main timer tick)
  TA1CTL = TASSEL_2 + MC_1;         // SMCLK, count-up mode
  TA1CCTL0 = CCIE;                  // Enable Timer1_A2 CCR0 interrupt
  __bis_SR_register(GIE);

}

// Timer1_A2, TA1CCR0 Register Interrupt
#pragma vector=TIMER1_A0_VECTOR
__interrupt void Timer1_A0 (void)
{
    uiTimerTick++;
}

void UpdateDisplay(void)
{
    static unsigned int uiLastTick = 0;
    switch (dispState)
    {
        case dispInit:
        default:
        {
            P1OUT &= ~ (A1_CTRL | A2_CTRL | A3_CTRL | A4_CTRL | A5_CTRL);
            P3OUT &= ~(A_CTRL | B_CTRL | C_CTRL | D_CTRL | E_CTRL | F_CTRL | G_CTRL | DP_CTRL);
            uiLastTick = uiTimerTick;

            // Set P1 and P3 to output
            P3DIR = 0xFF;
            P1DIR = 0xFF;
            dispState = dispDigit1;
        }
        break;
        case dispDigit1:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = ESeg;            // Segment data
                    P1OUT = A1_CTRL;         // Select first digit
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit2;
                    P1OUT &= ~A1_CTRL;       // Turn off anode 1
                }
        }
        break;
        case dispDigit2:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = FSeg;            // Segment data
                    P1OUT = A2_CTRL;         // Select second digit
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit3;
                    P1OUT &= ~A2_CTRL;       // Turn off anode 2
                }
        }
        break;
        case dispDigit3:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = 0;               // Segment data
                    P1OUT = A3_CTRL;         // Select colon
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit4;
                    P1OUT &= ~A3_CTRL;       // Turn off anode 3
                }
        }
        break;
        case dispDigit4:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = ESeg;            // Segment data
                    P1OUT = A4_CTRL;         // Select third digit
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit5;
                    P1OUT &= ~A4_CTRL;       // Turn off anode 4
                }
        }
        break;
        case dispDigit5:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = FSeg;            // Segment data
                    P1OUT = A5_CTRL;         // Select fifth digit
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit1;
                    P1OUT &= ~A5_CTRL;       // Turn off anode 5
                }
        }
        break;
    }
}

void main(void){

       WDTCTL = WDTPW | WDTHOLD;
       SetupTimerA1();

       while(1)
       {
           UpdateDisplay();
       }
}














