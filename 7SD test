/*
    Ethan Van Deusen
    Reference code that displays different characters on multiple digits of the Seven-Segment Display

    Uses a timer interrupt to keep each digit on for a small amount of time(600us) and then turns it off while turning on the next digit.
    Doing this for each digit really fast gives the look of all 4 digits on at once

    Configuration:
         Timer: Timer1_A2
         Timer source: SMCLK
         Clock source: DCO 8MHz
*/

#include <msp430.h>

//Arrays that contain hex values for controlling segments to display specific characters on the 7SD
const unsigned char ucNumToHex[] = {0x3f, 0x06, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x07, 0x7f, 0x6f};
const unsigned char ucCharToHex[] = {0x40, 0x39, 0x71, 0x76, 0x31, 0x3f, 0x54, 0x79, 0x5e, 0x6e};
/*  Index reference
  0:  0x3f    -:  0x40
  1:  0x06    C:  0x39
  2:  0x5b    F:  0x71
  3:  0x4f    H:  0x76
  4:  0x66    r:  0x31
  5:  0x6d    O:  0x3f
  6:  0x7d    n:  0x54
  7:  0x07    E:  0x79
  8:  0x7f    d:  0x5e
  9:  0x6f    y:  0x6e
*/

//Port 1, segment control
    #define A_CTRL  BIT0
    #define B_CTRL  BIT1
    #define C_CTRL  BIT2
    #define D_CTRL  BIT3
    #define E_CTRL  BIT4
    #define F_CTRL  BIT5
    #define G_CTRL  BIT6
    #define DP_CTRL BIT7

//Port 3, anode control
    #define A1_CTRL BIT0    // Digit 1
    #define A2_CTRL BIT1    // Digit 2
    #define A3_CTRL BIT2    // Colon, LED's, deg sign
    #define A4_CTRL BIT3    // Digit 3
    #define A5_CTRL BIT4    // Digit 4

typedef enum
{
    dispInit,        // Initial state
    dispDigit1,      // Anode 1, digit 1
    dispDigit2,      // Anode 2, digit 2
    dispDigit3,      // Anode 3, colon, degree symbol, and LED's
    dispDigit4,      // Anode 4, digit 3
    dispDigit5       // Anode 5, digit 4
} DisplayState;

volatile static DisplayState dispState = dispInit;      //Variable called 'dispState' of type 'DisplayState' used for changing digits on 7SD. dispInit sets UpdateDisplay() to default
volatile unsigned int uiTimerTick = 0;                  //Timer counter

/* Need to
 * 3. Clean up code
 * 5. Write explanation of how it all works
 * 6. Combine into main project
 * 7. Write code to link display to preset
 */

// Setup function for Timer1
void SetupTimerA1(void)
{
  TA1CTL = TACLR;                   // Stop the timer and clear it first
  TA1CCR0 = 400;                    // 400 = (x)us / (1/8MHz) (main timer tick)     How many seconds does a value of 400 correspond too?
  TA1CTL = TASSEL_2 + MC_1;         // SMCLK, count-up mode
  TA1CCTL0 = CCIE;                  // Enable Timer1_A2 CCR0 interrupt
  __bis_SR_register(GIE);
}

// Timer1, TA1CCR0 Register Interrupt
#pragma vector=TIMER1_A0_VECTOR
__interrupt void Timer1_A0 (void)
{
    uiTimerTick++;          // Every interrupt increment counter, used for how long an individual digit should be on/off
}

void UpdateDisplay(void)
{
    static unsigned int uiLastTick = 0; // Timer counter to compare against uiTimerTick for waiting
    switch (dispState)
    {
        case dispInit:
        default:
        {
            P1OUT &= ~ (A1_CTRL | A2_CTRL | A3_CTRL | A4_CTRL | A5_CTRL);
            P3OUT &= ~(A_CTRL | B_CTRL | C_CTRL | D_CTRL | E_CTRL | F_CTRL | G_CTRL | DP_CTRL);
            uiLastTick = uiTimerTick;

            // Set P1 and P3 to output
            P3DIR = 0xFF;
            P1DIR = 0xFF;
            dispState = dispDigit1;
        }
        break;
        case dispDigit1:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = ucCharToHex[2];            // Segment data
                    P1OUT = A1_CTRL;         // Select first digit
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit2;
                    P1OUT &= ~A1_CTRL;       // Turn off anode 1
                }
        }
        break;
        case dispDigit2:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = ucCharToHex[7];            // Segment data
                    P1OUT = A2_CTRL;         // Select second digit
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit3;
                    P1OUT &= ~A2_CTRL;       // Turn off anode 2
                }
        }
        break;
        case dispDigit3:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = 0;               // Segment data
                    P1OUT = A3_CTRL;         // Select colon
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit4;
                    P1OUT &= ~A3_CTRL;       // Turn off anode 3
                }
        }
        break;
        case dispDigit4:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = ucNumToHex[0];            // Segment data
                    P1OUT = A4_CTRL;         // Select third digit
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit5;
                    P1OUT &= ~A4_CTRL;       // Turn off anode 4
                }
        }
        break;
        case dispDigit5:
        {
            if ((uiTimerTick - uiLastTick) >= 1)
                {
                    P3OUT = ucNumToHex[1];            // Segment data
                    P1OUT = A5_CTRL;         // Select fifth digit
                }
            if ((uiTimerTick - uiLastTick) >= 8)
                {
                    uiLastTick = uiTimerTick;
                    dispState = dispDigit1;
                    P1OUT &= ~A5_CTRL;       // Turn off anode 5
                }
        }
        break;
    }
}

// Call timer setup function, counter(uiTimerTick) is incremented every 75us. This is used to keep the digits on for 8 ticks(8 interrupts so 600us) and then turn off while setting the next anode.
// UpdateDisplay is running constantly and the counter cycles through the case statements to change the digits
void main(void){

       WDTCTL = WDTPW | WDTHOLD;
       SetupTimerA1();

       while(1)
       {
           UpdateDisplay();
       }
}














